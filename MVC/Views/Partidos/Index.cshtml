@model IEnumerable<MVC.Models.Partido>

@{
    ViewBag.Title = "Partidos";
}

<h2 class="text-center">Partidos</h2>

<p class="btn btn-default navbar-left">
    @Html.ActionLink("Crear", "Create")
</p>

@using (Html.BeginForm("CargarArchivoCSV", "Partidos", FormMethod.Post, new { enctype = "multipart/form-data" }))
{
    @Html.AntiForgeryToken()
    <div class="form-horizontal">
        <input type="file" name="postedFile" class="form-control col-md-6"/>
        <input type="submit" name="importar" value="Importar CSV" class="btn btn-default" />
        @Html.ValidationMessage("CargaArchivo", "", new { @class = "text-danger" })

    </div>
}
@if (Model.Count() > 0)
{
    <hr />

    <div>
        <form class="navbar-form navbar-left" role="search">
            <input type="text" id="myInputCompeticion" class="form-control" onkeyup="BuscarCompeticion()" placeholder="Buscar competición...">
        </form>
    </div>
    <div>
        <form class="navbar-form navbar-left" role="search">
            <input type="text" id="myInputEquipoLocal" class="form-control" onkeyup="BuscarEquipoLocal()" placeholder="Buscar equipo local...">
        </form>
    </div>
    <div>
        <form class="navbar-form navbar-left" role="search">
            <input type="text" id="myInputEquipoVisitante" class="form-control" onkeyup="BuscarEquipoVisitante()" placeholder="Buscar equipo visitante...">
        </form>
    </div>
    <div>
        <form class="navbar-form navbar-left" role="search">
            <input type="text" id="myInputAnalistaLocal" class="form-control" onkeyup="BuscarAnalistaLocal()" placeholder="Buscar analista local...">
        </form>
    </div>
    <div>
        <form class="navbar-form navbar-left" role="search">
            <input type="text" id="myInputAnalistaVisitante" class="form-control" onkeyup="BuscarAnalistaVisitante()" placeholder="Buscar analista visitante...">
        </form>
    </div>

    using (Html.BeginForm("FiltrarOAsignarPartidos", "Partidos", "POST"))
    {
        @Html.AntiForgeryToken()
        <div class="form-horizontal">
            @Html.ValidationSummary(true, "", new { @class = "text-danger" })
            <div class="form-group">
                @Html.Label("Fecha Inicio:", htmlAttributes: new { @class = "control-label col-md-2" })
                <input type="date" name="fechaInicio" value="@ViewBag.FechaInicio" class="form-control col-md-6" />
                @Html.Label("Fecha Fin:", htmlAttributes: new { @class = "control-label col-md-2" })
                <input type="date" name="fechaFin" value="@ViewBag.FechaFin" class="form-control col-md-6" />
                <input type="submit" name="FiltrarButton" value="Filtrar" class="btn btn-default" />
                <input type="submit" name="AsignarButton" value="Asignar" class="btn btn-default" />
            </div>

        </div>
    }
    <table class="text-center table table-responsive table-striped table-hover" id="myTable">
        <tr>
            <th class="text-center">
                @Html.DisplayNameFor(model => model.FechaPartido)
            </th>
            <th class="text-center">
                @Html.DisplayNameFor(model => model.Hora)
            </th>
            <th class="text-center">
                @Html.DisplayName("Competición")
            </th>
            <th class="text-center">
                @Html.DisplayName("Equipo local")
            </th>
            <th class="text-center">
                @Html.DisplayName("Equipo visitante")
            </th>
            <th class="text-center">
                @Html.DisplayName("Analista local")
            </th>
            <th class="text-center">
                @Html.DisplayName("Analista visitante")
            </th>
            <th></th>
        </tr>

        @foreach (var item in Model)
        {
    <tr>
        <td>
            @Html.DisplayFor(modelItem => item.FechaPartido)
        </td>
        <td>
            @Html.DisplayFor(modelItem => item.Hora)
        </td>
        <td>
            @Html.DisplayFor(modelItem => item.Competicion.NombreCompeticion)
        </td>
        <td>
            @Html.DisplayFor(modelItem => item.Local.NombreEquipo)
        </td>
        <td>
            @Html.DisplayFor(modelItem => item.Visitante.NombreEquipo)
        </td>
        @if (item.AnalistaLocal == null || item.AnalistaLocal.Activo)
        {
            <td>
                @Html.DisplayFor(modelItem => item.AnalistaLocal.NombreUsuario)
            </td>
        }
        else
        {
            <td class="warning">
                @Html.DisplayFor(modelItem => item.AnalistaLocal.NombreUsuario)
            </td>
        }
        @if (item.AnalistaVisitante == null || item.AnalistaVisitante.Activo)
        {
            <td>
                @Html.DisplayFor(modelItem => item.AnalistaVisitante.NombreUsuario)
            </td>
        }
        else
        {
            <td class="warning">
                @Html.DisplayFor(modelItem => item.AnalistaVisitante.NombreUsuario)
            </td>
        }
        @if (item.AnalistaLocal != null || item.AnalistaVisitante != null)
        {
            <td>
                @Html.ActionLink("Editar", "Edit", new { id = item.IdPartido }) |
                @Html.ActionLink("Eliminar", "Delete", new { id = item.IdPartido }) |
                @Html.ActionLink("Reasignar", "ReasignarAnalista", new { id = item.IdPartido })
            </td>
        }
        else
        {
            <td>
                @Html.ActionLink("Editar", "Edit", new { id = item.IdPartido }) |
                @Html.ActionLink("Eliminar", "Delete", new { id = item.IdPartido })
            </td>
        }
    </tr>
        }

    </table>
}

<script>
    function BuscarCompeticion() {
        // Declare variables
        var input, filter, table, tr, td, i, txtValue;
        input = document.getElementById("myInputCompeticion");
        filter = input.value.toUpperCase();
        table = document.getElementById("myTable");
        tr = table.getElementsByTagName("tr");

        // Loop through all table rows, and hide those who don't match the search query
        for (i = 0; i < tr.length; i++) {
            td = tr[i].getElementsByTagName("td")[2];
            if (td) {
                txtValue = td.textContent || td.innerText;
                if (txtValue.toUpperCase().indexOf(filter) > -1) {
                    tr[i].style.display = "";
                } else {
                    tr[i].style.display = "none";
                }
            }
        }
    }

    function BuscarEquipoLocal() {
        // Declare variables
        var input, filter, table, tr, td, i, txtValue;
        input = document.getElementById("myInputEquipoLocal");
        filter = input.value.toUpperCase();
        table = document.getElementById("myTable");
        tr = table.getElementsByTagName("tr");

        // Loop through all table rows, and hide those who don't match the search query
        for (i = 0; i < tr.length; i++) {
            td = tr[i].getElementsByTagName("td")[3];
            if (td) {
                txtValue = td.textContent || td.innerText;
                if (txtValue.toUpperCase().indexOf(filter) > -1) {
                    tr[i].style.display = "";
                } else {
                    tr[i].style.display = "none";
                }
            }
        }
    }

    function BuscarEquipoVisitante() {
        // Declare variables
        var input, filter, table, tr, td, i, txtValue;
        input = document.getElementById("myInputEquipoVisitante");
        filter = input.value.toUpperCase();
        table = document.getElementById("myTable");
        tr = table.getElementsByTagName("tr");

        // Loop through all table rows, and hide those who don't match the search query
        for (i = 0; i < tr.length; i++) {
            td = tr[i].getElementsByTagName("td")[4];
            if (td) {
                txtValue = td.textContent || td.innerText;
                if (txtValue.toUpperCase().indexOf(filter) > -1) {
                    tr[i].style.display = "";
                } else {
                    tr[i].style.display = "none";
                }
            }
        }
    }

    function BuscarAnalistaLocal() {
        // Declare variables
        var input, filter, table, tr, td, i, txtValue;
        input = document.getElementById("myInputAnalistaLocal");
        filter = input.value.toUpperCase();
        table = document.getElementById("myTable");
        tr = table.getElementsByTagName("tr");

        // Loop through all table rows, and hide those who don't match the search query
        for (i = 0; i < tr.length; i++) {
            td = tr[i].getElementsByTagName("td")[5];
            if (td) {
                txtValue = td.textContent || td.innerText;
                if (txtValue.toUpperCase().indexOf(filter) > -1) {
                    tr[i].style.display = "";
                } else {
                    tr[i].style.display = "none";
                }
            }
        }
    }

    function BuscarAnalistaVisitante() {
        // Declare variables
        var input, filter, table, tr, td, i, txtValue;
        input = document.getElementById("myInputAnalistaVisitante");
        filter = input.value.toUpperCase();
        table = document.getElementById("myTable");
        tr = table.getElementsByTagName("tr");

        // Loop through all table rows, and hide those who don't match the search query
        for (i = 0; i < tr.length; i++) {
            td = tr[i].getElementsByTagName("td")[6];
            if (td) {
                txtValue = td.textContent || td.innerText;
                if (txtValue.toUpperCase().indexOf(filter) > -1) {
                    tr[i].style.display = "";
                } else {
                    tr[i].style.display = "none";
                }
            }
        }
    }
</script>